#!/bin/bash
# Claude Code TODO Management Utility
# Wrapper script for todo-manager.py with enhanced usability

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TODO_MANAGER="$SCRIPT_DIR/todo-manager.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}✓ $1${NC}"
}

info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

show_help() {
    cat << EOF
Claude Code TODO Management Utility

USAGE:
    claude-todo <command> [options]

COMMANDS:
    add <title>              Add new TODO item
        --type <type>        TODO type (required): feature|bug|improvement|refactor|docs|test|security|performance
        --impact <impact>    SemVer impact (required): major|minor|patch
        --priority <priority> Priority level: critical|high|medium|low (default: medium)
        --assignee <agent>   Assigned agent: researcher|completer|patterns|etc.
        --description <desc> Detailed description

    list [options]           List TODOs
        --status <status>    Filter by status: pending|in_progress|completed|blocked|cancelled
        --assignee <agent>   Filter by assignee
        --format <format>    Output format: table|json (default: table)

    start <todo-id>          Mark TODO as in progress
    complete <todo-id>       Mark TODO as completed
    block <todo-id>          Mark TODO as blocked
        --reason <reason>    Reason for blocking (required)

    release [options]        Generate release from completed TODOs
        --dry-run           Show what would be done without making changes

    stats                   Show TODO statistics
    help                    Show this help message

EXAMPLES:
    # Add a new feature TODO
    claude-todo add "Add user authentication" --type feature --impact minor --priority high --assignee researcher

    # List pending TODOs
    claude-todo list --status pending

    # Start working on a TODO
    claude-todo start TODO-001

    # Complete a TODO
    claude-todo complete TODO-001

    # Block a TODO with reason
    claude-todo block TODO-002 --reason "waiting for API documentation"

    # Generate release (dry run first)
    claude-todo release --dry-run
    claude-todo release

SEMVER IMPACT GUIDE:
    major   - Breaking changes, API removals, major refactors
    minor   - New features, backwards-compatible additions
    patch   - Bug fixes, documentation, small improvements

AGENT SUGGESTIONS:
    feature     → completer (finds missing functionality)
    bug         → researcher (investigates issues)
    security    → researcher + patterns (security analysis)
    docs        → docs (documentation updates)
    refactor    → patterns + principles (code improvement)
    performance → researcher + patterns (optimization)
EOF
}

# Check if todo-manager.py exists
if [[ ! -f "$TODO_MANAGER" ]]; then
    error "todo-manager.py not found at $TODO_MANAGER"
fi

# Check if Python is available
if ! command -v python3 &> /dev/null; then
    error "Python 3 is required but not installed"
fi

# Parse command
COMMAND="$1"
shift || true

case "$COMMAND" in
    "add")
        # Parse arguments for add command
        TITLE=""
        TYPE=""
        IMPACT=""
        PRIORITY="medium"
        ASSIGNEE=""
        DESCRIPTION=""

        while [[ $# -gt 0 ]]; do
            case $1 in
                --type)
                    TYPE="$2"
                    shift 2
                    ;;
                --impact)
                    IMPACT="$2"
                    shift 2
                    ;;
                --priority)
                    PRIORITY="$2"
                    shift 2
                    ;;
                --assignee)
                    ASSIGNEE="$2"
                    shift 2
                    ;;
                --description)
                    DESCRIPTION="$2"
                    shift 2
                    ;;
                *)
                    if [[ -z "$TITLE" ]]; then
                        TITLE="$1"
                    else
                        error "Unknown argument: $1"
                    fi
                    shift
                    ;;
            esac
        done

        # Validation
        [[ -z "$TITLE" ]] && error "Title is required"
        [[ -z "$TYPE" ]] && error "--type is required (feature|bug|improvement|refactor|docs|test|security|performance)"
        [[ -z "$IMPACT" ]] && error "--impact is required (major|minor|patch)"

        # Build command
        CMD="python3 \"$TODO_MANAGER\" add \"$TITLE\" --type \"$TYPE\" --impact \"$IMPACT\" --priority \"$PRIORITY\""
        [[ -n "$ASSIGNEE" ]] && CMD="$CMD --assignee \"$ASSIGNEE\""
        [[ -n "$DESCRIPTION" ]] && CMD="$CMD --description \"$DESCRIPTION\""

        info "Adding TODO: $TITLE"
        eval "$CMD"
        success "TODO added successfully"
        ;;

    "list")
        # Parse arguments for list command
        STATUS=""
        ASSIGNEE=""
        FORMAT="table"

        while [[ $# -gt 0 ]]; do
            case $1 in
                --status)
                    STATUS="$2"
                    shift 2
                    ;;
                --assignee)
                    ASSIGNEE="$2"
                    shift 2
                    ;;
                --format)
                    FORMAT="$2"
                    shift 2
                    ;;
                *)
                    error "Unknown argument: $1"
                    ;;
            esac
        done

        # Build command
        CMD="python3 \"$TODO_MANAGER\" list --format \"$FORMAT\""
        [[ -n "$STATUS" ]] && CMD="$CMD --status \"$STATUS\""
        [[ -n "$ASSIGNEE" ]] && CMD="$CMD --assignee \"$ASSIGNEE\""

        eval "$CMD"
        ;;

    "start"|"complete"|"block")
        TODO_ID="$1"
        [[ -z "$TODO_ID" ]] && error "TODO ID is required"

        NEW_STATUS=""
        case "$COMMAND" in
            "start") NEW_STATUS="in_progress" ;;
            "complete") NEW_STATUS="completed" ;;
            "block") NEW_STATUS="blocked" ;;
        esac

        # For block command, reason is required
        REASON=""
        if [[ "$COMMAND" == "block" ]]; then
            shift
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --reason)
                        REASON="$2"
                        shift 2
                        ;;
                    *)
                        error "Unknown argument: $1"
                        ;;
                esac
            done
            [[ -z "$REASON" ]] && error "--reason is required for block command"
        fi

        # Build command
        CMD="python3 \"$TODO_MANAGER\" update \"$TODO_ID\" --status \"$NEW_STATUS\""
        [[ -n "$REASON" ]] && CMD="$CMD --reason \"$REASON\""

        info "Updating TODO $TODO_ID to $NEW_STATUS"
        eval "$CMD"
        success "TODO updated successfully"
        ;;

    "release")
        DRY_RUN=""
        while [[ $# -gt 0 ]]; do
            case $1 in
                --dry-run)
                    DRY_RUN="--dry-run"
                    shift
                    ;;
                *)
                    error "Unknown argument: $1"
                    ;;
            esac
        done

        info "Generating release from completed TODOs..."
        python3 "$TODO_MANAGER" release $DRY_RUN
        [[ -z "$DRY_RUN" ]] && success "Release created successfully"
        ;;

    "stats")
        info "TODO Statistics:"
        python3 "$TODO_MANAGER" list --format json | python3 -c "
import json
import sys
from collections import Counter

data = json.load(sys.stdin)
stats = Counter(todo['status'] for todo in data)
priorities = Counter(todo['priority'] for todo in data)
assignees = Counter(todo.get('assignee', 'unassigned') for todo in data if todo.get('assignee'))

print(f'Total TODOs: {len(data)}')
print()
print('By Status:')
for status, count in stats.items():
    print(f'  {status}: {count}')
print()
print('By Priority:')
for priority, count in priorities.items():
    print(f'  {priority}: {count}')
print()
if assignees:
    print('By Assignee:')
    for assignee, count in assignees.items():
        print(f'  {assignee}: {count}')
"
        ;;

    "help"|"--help"|"-h"|"")
        show_help
        ;;

    *)
        error "Unknown command: $COMMAND. Use 'claude-todo help' for usage information."
        ;;
esac