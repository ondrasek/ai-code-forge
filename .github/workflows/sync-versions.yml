---
name: Sync Versions

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Target version to sync to (e.g., 3.0.4)'
        required: true
        type: string
      commit_message:
        description: 'Custom commit message (optional)'
        required: false
        type: string
        default: 'chore: sync all version-bearing files'
      create_pr:
        description: 'Create pull request instead of direct commit'
        required: false
        type: boolean
        default: false

jobs:
  sync-versions:
    name: Synchronize Version Files
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate target version format
        run: |
          VERSION="${{ inputs.target_version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ ERROR: Invalid version format: $VERSION"
            echo "Expected format: x.y.z or x.y.z-suffix (e.g., 3.0.4, 3.0.4-beta.1)"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Make sync script executable
        run: chmod +x scripts/sync-versions.sh

      - name: Run version synchronization
        run: |
          echo "🔄 Synchronizing all version-bearing files to ${{ inputs.target_version }}..."
          ./scripts/sync-versions.sh "${{ inputs.target_version }}"

      - name: Validate version consistency
        run: |
          echo "🔍 Validating version consistency after synchronization..."
          chmod +x scripts/validate-versions.sh
          ./scripts/validate-versions.sh "${{ inputs.target_version }}"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected - all files already at target version"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version changes detected and validated"
            echo ""
            echo "📋 Changed files:"
            git diff --name-only
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true' && inputs.create_pr == true
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            ${{ inputs.commit_message || 'chore: sync all version-bearing files' }} to ${{ inputs.target_version }}
            
            🤖 Automated version synchronization via GitHub Actions
            
            - Updated all pyproject.toml files to version ${{ inputs.target_version }}
            - Updated all __init__.py files to version ${{ inputs.target_version }}
            - Version consistency validated
          title: "chore: sync versions to ${{ inputs.target_version }}"
          body: |
            ## 🔄 Automated Version Synchronization
            
            This PR synchronizes all version-bearing files to **${{ inputs.target_version }}**.
            
            ### 📦 Files Updated
            - All `pyproject.toml` files
            - All `__init__.py` files with version declarations
            
            ### ✅ Validation
            - Version format validated
            - Consistency check passed
            - All components synchronized
            
            ### 🤖 Automation
            Generated via GitHub Actions workflow: **Sync Versions**
            
            **Target Version**: `${{ inputs.target_version }}`
            **Validation**: ✅ Passed
            **Ready to merge**: Yes
          branch: chore/sync-versions-${{ inputs.target_version }}
          delete-branch: true
          labels: |
            chore
            automated
            version-sync

      - name: Commit directly to branch
        if: steps.changes.outputs.changed == 'true' && inputs.create_pr == false
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add -A
          git commit -m "${{ inputs.commit_message || 'chore: sync all version-bearing files' }} to ${{ inputs.target_version }}

          🤖 Automated version synchronization via GitHub Actions

          - Updated all pyproject.toml files to version ${{ inputs.target_version }}
          - Updated all __init__.py files to version ${{ inputs.target_version }}
          - Version consistency validated"
          
          git push origin HEAD

      - name: Summary
        run: |
          echo "## 🔄 Version Synchronization Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.changes.outputs.changed }}" == "true" ]]; then
            echo "✅ **Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Target Version:** \`${{ inputs.target_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ inputs.create_pr }}" == "true" ]]; then
              echo "📋 **Action:** Pull Request created for review" >> $GITHUB_STEP_SUMMARY
              echo "🔗 **Branch:** \`chore/sync-versions-${{ inputs.target_version }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "📋 **Action:** Changes committed directly to branch" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Synchronized Files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Status:** NO CHANGES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All files were already at target version \`${{ inputs.target_version }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validation Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Version format validation: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Version consistency check: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- All components synchronized: YES" >> $GITHUB_STEP_SUMMARY
