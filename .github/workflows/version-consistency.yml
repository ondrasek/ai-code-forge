name: Version Consistency Check

on:
  pull_request:
    paths:
      - '**/pyproject.toml'
      - 'scripts/validate-versions.sh'
      - '.github/workflows/version-consistency.yml'
  push:
    branches: [main]
    paths:
      - '**/pyproject.toml'
      - 'scripts/validate-versions.sh'
  workflow_dispatch:
    inputs:
      expected_version:
        description: 'Expected version to validate against (optional)'
        required: false
        type: string

jobs:
  validate-versions:
    name: Validate Version Consistency
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # For PR comments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Make validation script executable
        run: chmod +x scripts/validate-versions.sh

      - name: Run version consistency validation
        id: validate
        run: |
          echo "🔍 Running version consistency validation..."
          
          # Determine if we have an expected version
          EXPECTED_VERSION="${{ inputs.expected_version }}"
          
          # Run validation
          if [[ -n "$EXPECTED_VERSION" ]]; then
            echo "Validating against expected version: $EXPECTED_VERSION"
            ./scripts/validate-versions.sh "$EXPECTED_VERSION"
          else
            echo "Validating internal consistency (no expected version specified)"
            ./scripts/validate-versions.sh
          fi
          
          echo "validation_passed=true" >> $GITHUB_OUTPUT

      - name: Comment on PR (success)
        if: github.event_name == 'pull_request' && steps.validate.outputs.validation_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ Version Consistency Check Passed
              
              All \`pyproject.toml\` files have consistent versions.
              
              🔍 **Validation Details:**
              - All component versions are synchronized
              - Semantic versioning format validated
              - Ready for release workflow
              
              > This automated check prevents version drift across CLI and MCP server components.`
            })

      - name: Comment on PR (failure)  
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ Version Consistency Check Failed
              
              Version mismatch detected across \`pyproject.toml\` files.
              
              🚫 **Issue:**
              - CLI, MCP servers must have synchronized versions
              - All components should use the same version number
              
              💡 **How to Fix:**
              1. Update all \`pyproject.toml\` files to use the same version
              2. Use \`/tag\` command which automatically synchronizes versions
              3. Commit the version changes
              
              **Files to check:**
              - \`cli/pyproject.toml\`
              - \`mcp-servers/perplexity-mcp/pyproject.toml\`
              - \`mcp-servers/openai-structured-mcp/pyproject.toml\`
              
              > This check prevents version drift and ensures consistent releases.`
            })

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: validate-versions
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🔍 Version Consistency Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-versions.result }}" == "success" ]]; then
            echo "✅ **Status:** PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All \`pyproject.toml\` files have consistent versions." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Validation Results:" >> $GITHUB_STEP_SUMMARY
            echo "- CLI version matches MCP server versions" >> $GITHUB_STEP_SUMMARY
            echo "- Semantic versioning format validated" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for release workflow" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Version mismatch detected. All components must use synchronized versions." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Update all \`pyproject.toml\` files to use the same version" >> $GITHUB_STEP_SUMMARY
            echo "2. Use \`/tag\` command for automatic version synchronization" >> $GITHUB_STEP_SUMMARY
            echo "3. Commit version changes before merging" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Validated Files:" >> $GITHUB_STEP_SUMMARY
          echo "- \`cli/pyproject.toml\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`mcp-servers/perplexity-mcp/pyproject.toml\`" >> $GITHUB_STEP_SUMMARY  
          echo "- \`mcp-servers/openai-structured-mcp/pyproject.toml\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> This automated check prevents version drift and ensures consistent releases." >> $GITHUB_STEP_SUMMARY