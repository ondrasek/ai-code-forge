#!/bin/bash

# DevContainer Setup Script - Replicates Codespace Environment
# This script sets up the exact same environment as the GitHub Codespace

# Load environment variables first - these must be available to all scripts
devcontainerDir=/tmp/.devcontainer
postCreateEnvFile=$devcontainerDir/postCreate.env.tmp
[ -f $postCreateEnvFile ] || {
    echo "‚ùå The env file: $postCreateEnvFile does not exist! This should have been generated by the build.sh script."
    exit 1
}

eval "$(grep -v '^#' $postCreateEnvFile | sed 's/^/export /')"
export workingCopy=/workspace/$repositoryName
export worktreesDir=/workspace/worktrees/$repositoryName

echo "Configuration from initializeCommand:"
echo "repositoryName: $repositoryName"
echo "repositoryNameWithOwner: $repositoryNameWithOwner"
echo "gitUserName: $gitUserName"
echo "gitUserEmail: $gitUserEmail"
echo "workingCopy: $workingCopy"
echo "worktreesDir: $worktreesDir"

# Detect if we're in a container environment
export CONTAINER_ENV=1

# Skip the hassle when in GitHub Codespaces
if [ "$CODESPACES" = "true" ]; then
  echo "In Codespaces, exiting..."
  exit 0
fi

set -e

# Execute setup scripts in order
postCreateScriptsDir=$(dirname $0)/postCreate-scripts
echo "üîÑ Running setup scripts in: $postCreateScriptsDir"

"$postCreateScriptsDir/install-dev-tools.sh"
"$postCreateScriptsDir/configure-shell.sh"
"$postCreateScriptsDir/setup-git.sh"
"$postCreateScriptsDir/authenticate-github.sh"
"$postCreateScriptsDir/prepare-repository.sh"
"$postCreateScriptsDir/initialize-worktree.sh"
"$postCreateScriptsDir/configure-shell-environment.sh"
"$postCreateScriptsDir/verify-installation.sh"

echo "üéâ All setup scripts completed successfully!"
